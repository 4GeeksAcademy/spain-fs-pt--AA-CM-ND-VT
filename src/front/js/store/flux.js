import e from "sweetalert2"; let getState = ({ getStore: t, getActions: o, setStore: r }) => ({ store: { token: null, username: null, user_id: null, rol: null, companyname: null, company: null, company_id: null, company_id_service: null, services: [], masterServices: [], image: null }, actions: { async login(t, o) { let n = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ email: t, password: o }) }; try { let a = await fetch(`${process.env.BACKEND_URL}/api/login`, n); if (200 !== a.status) return e.fire({ title: "Oops...", text: "There has been some error, please try again!", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), !1; let i = await a.json(); return sessionStorage.setItem("token", i.access_token), sessionStorage.setItem("username", i.username), sessionStorage.setItem("user_id", i.user_id), sessionStorage.setItem("rol", i.rol), sessionStorage.setItem("companyname", i.companyname), sessionStorage.setItem("company_id", i.company_id), r({ token: i.access_token, username: i.username, user_id: i.user_id, rol: i.rol, companyname: i.companyname, company_id: i.company_id }), e.fire({ title: "Hello!", text: "Welcome, have a good experience!", icon: "success", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), !0 } catch (s) { console.log(s) } }, async signup(t, o, r, n) { let a = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ name: r, email: t, password: o, rol: n }) }; try { let i = await fetch(`${process.env.BACKEND_URL}/api/signin`, a); if (200 !== i.status) return e.fire({ title: "Oops...", text: "There has been some error, please try again!", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), !1; return await i.json(), e.fire({ title: "Welcome!", text: "Your account has been successfully created. Enjoy your experience!", icon: "success", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), !0 } catch (s) { return !1 } }, async signupCompany(t, o, r, n, a, i) { let s = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ name: r, email: t, password: o, rol: n, company_name: a, location: i }) }; try { let l = await fetch(`${process.env.BACKEND_URL}/api/signup_company`, s); if (200 !== l.status) return e.fire({ title: "Oops...", text: "There has been some error, please try again!", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), !1; return e.fire({ title: "Nice!", text: "You signed up successfully!", icon: "success", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), !0 } catch (c) { return console.log(c), e.fire({ title: "Error!", text: "An error occurred, please try again later.", icon: "error", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), !1 } }, syncToken() { let e = sessionStorage.getItem("token"), o = sessionStorage.getItem("user_id"), n = sessionStorage.getItem("username"), a = sessionStorage.getItem("rol"); e && r({ ...t(), token: e, user_id: o, username: n, rol: a }) }, async logout() { let e = { method: "POST", headers: { "Content-Type": "application/json", Authorization: "Bearer " + t().token } }; try { await fetch(`${process.env.BACKEND_URL}/api/logout`, e), sessionStorage.removeItem("token"), sessionStorage.removeItem("user_id"), sessionStorage.removeItem("username"), sessionStorage.removeItem("rol"), sessionStorage.removeItem("companyname"), sessionStorage.removeItem("company_id"), r({ token: null, username: null, user_id: null, rol: null, companyname: null, company_id: null }) } catch (o) { console.log(o) } }, async uploadWorkImage(e) { let o = t(); r({ ...o, image: e }) }, setCompanyIdService(e) { r({ company_id_service: e }) }, async getService(e) { t(); try { let o = await fetch(`${process.env.BACKEND_URL}/api/services/${e}`, { headers: { "Content-Type": "application/json" } }); if (!o.ok) throw Error("Failed to fetch service"); let r = await o.json(); return r } catch (n) { return console.error("Error fetching service:", n), null } }, async getServicesByCompany(o) { let r = t(), n = { method: "GET", headers: { "Content-Type": "application/json", Authorization: `Bearer ${r.token}` } }; try { let a = await fetch(`${process.env.BACKEND_URL}/api/services?companies_id=${o}`, n); if (200 !== a.status) return e.fire({ title: "Oops...", text: "There has been some error, please try again!", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), []; let i = await a.json(); return console.log(i), i } catch (s) { return console.log(s), [] } }, async getAllServices() { let o = t(), r = { method: "GET", headers: { "Content-Type": "application/json", Authorization: `Bearer ${o.token}` } }; try { let n = await fetch(`${process.env.BACKEND_URL}/api/all_services`, r); if (200 !== n.status) return e.fire({ title: "Oops...", text: "There has been some error, please try again!", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), []; let a = await n.json(); return a } catch (i) { return console.log(i), [] } }, async createService(o) { let r = t(), n = { method: "POST", headers: { "Content-Type": "application/json", Authorization: `Bearer ${r.token}` }, body: JSON.stringify(o) }; try { let a = await fetch(`${process.env.BACKEND_URL}/api/services`, n); if (201 !== a.status) return e.fire({ title: "Oops...", text: "There has been some error, please try again!", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), !1; return await a.json(), e.fire({ title: "Confirmed", text: "Service created successfully.", icon: "success" }), !0 } catch (i) { return console.log(i), !1 } }, async getMasterServices() { let o = t(), r = { method: "GET", headers: { "Content-Type": "application/json", Authorization: `Bearer ${o.token}` } }; try { let n = await fetch(`${process.env.BACKEND_URL}/api/master_services`, r); if (200 !== n.status) return e.fire({ title: "Oops...", text: "There has been some error, please try again!", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), []; let a = await n.json(); return a } catch (i) { return console.log(i), [] } }, async reserveService(o) { let r = t(), n = { method: "POST", headers: { "Content-Type": "application/json", Authorization: `Bearer ${r.token}` }, body: JSON.stringify(o) }; try { let a = await fetch(`${process.env.BACKEND_URL}/api/bookings`, n); if (201 !== a.status) return e.fire({ title: "Oops...", text: "There has been some error, please try again!", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), !1; let i = await a.json(), s = { booking_id: i.id, status: "Pending", comment: "" }, l = { method: "POST", headers: { "Content-Type": "application/json", Authorization: `Bearer ${r.token}` }, body: JSON.stringify(s) }; try { let c = await fetch(`${process.env.BACKEND_URL}/api/requests`, l); if (201 !== c.status) return e.fire({ title: "Oops...", text: "There has been some error, please try again!", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), !1; e.fire({ title: "Service reserved successfully.", text: "We hope you enjoy it!", icon: "success" }) } catch (p) { return console.log(p), !1 } } catch (u) { console.log(u) } }, async getUser(e) { let o = t(); try { let n = await fetch(`${process.env.BACKEND_URL}/api/clientportal/${e}`, { headers: { "Content-Type": "application/json", Authorization: `Bearer ${o.token}` } }); if (!n.ok) throw Error("Failed to fetch company"); let a = await n.json(); return r({ user: a }), a } catch (i) { throw console.error("Error fetching company:", i), i } }, async updateUser(e, o) { let r = t(), n = r.token; console.log(`Updating user ${e} with data:`, o), console.log("Backend URL:", process.env.BACKEND_URL), console.log("Token:", n); try { let a = await fetch(`${process.env.BACKEND_URL}/api/clientportal/${e}`, { method: "PUT", headers: { "Content-Type": "application/json", Authorization: `Bearer ${n}` }, body: JSON.stringify(o) }); if (!a.ok) { let i = await a.json(); throw console.error("Error:", i), Error("Failed to update user") } let s = await a.json(); return s } catch (l) { throw console.error("Fetch error:", l), l } }, async deleteUser(o) { let n = t(), a = n.token; console.log(`Deleting user ${o}`), console.log("Backend URL:", process.env.BACKEND_URL), console.log("Token:", a); try { let i = await fetch(`${process.env.BACKEND_URL}/api/clientportal/${o}`, { method: "DELETE", headers: { "Content-Type": "application/json", Authorization: `Bearer ${a}` } }); if (!i.ok) { let s = await i.json(); return console.error("Error:", s), e.fire({ title: "Oops...", text: "There has been some error, please try again!", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), !1 } return r({ user: null }), !0 } catch (l) { return console.error("Fetch error:", l), !1 } }, async getUserBookings() { let t = sessionStorage.getItem("user_id"); if (!t) return e.fire({ title: "Oops...", text: "Company ID is missing. Please try again later.", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), []; try { let o = await fetch(`${process.env.BACKEND_URL}/api/user_bookings?user_id=${t}`, { method: "GET", headers: { "Content-Type": "application/json" } }); if (200 !== o.status) return []; let r = await o.json(); return r } catch (n) { return console.log(n), [] } }, async getUserRequests() { let t = sessionStorage.getItem("user_id"); if (!t) return e.fire({ title: "Oops...", text: "Company ID is missing. Please try to log in again..", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), []; try { let o = await fetch(`${process.env.BACKEND_URL}/api/user_requests?user_id=${t}`, { method: "GET", headers: { "Content-Type": "application/json" } }); if (200 !== o.status) return e.fire({ title: "Oops...", text: "There has been some error, please try again!", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), []; let r = await o.json(); return r } catch (n) { return console.log(n), [] } }, async getCompanyBookings() { let t = sessionStorage.getItem("company_id"); if (!t) return e.fire({ title: "Oops...", text: "Company ID is missing. Please log in again.", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), []; try { let o = await fetch(`${process.env.BACKEND_URL}/api/company_bookings?company_id=${t}`, { method: "GET", headers: { "Content-Type": "application/json" } }); if (200 !== o.status) return e.fire({ title: "Oops...", text: "There has been some error, please try again!", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), []; let r = await o.json(); return r } catch (n) { return console.log(n), [] } }, async getCompanyRequests() { let t = sessionStorage.getItem("company_id"); if (!t) return e.fire({ title: "Oops...", text: "Company ID is missing. Please log in again.", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), []; try { let o = await fetch(`${process.env.BACKEND_URL}/api/company_requests?company_id=${t}`, { method: "GET", headers: { "Content-Type": "application/json" } }); if (200 !== o.status) return e.fire({ title: "Oops...", text: "There has been some error, please try again!", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), []; let r = await o.json(); return r } catch (n) { return console.log(n), [] } }, async updateRequestStatus(t, o, r) { let n = sessionStorage.getItem("company_id"); if (!n) return e.fire({ title: "Oops...", text: "Company ID is missing. Please log in again.", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), null; let a = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ requestId: t, status: o, comment: r }) }; try { let i = await fetch(`${process.env.BACKEND_URL}/api/update_request`, a); if (200 !== i.status) return e.fire({ title: "Oops...", text: "There has been some error, please try again!", icon: "warning", iconColor: "#f5e556", confirmButtonColor: "#f5e556" }), null; let s = await i.json(); return s } catch (l) { return console.log(l), null } }, async getCompany(e) { t(); try { let o = await fetch(`${process.env.BACKEND_URL}/api/adminportal/${e}`, { headers: { "Content-Type": "application/json" } }); if (!o.ok) throw Error("Failed to fetch company"); let n = await o.json(); return r({ company: n }), n } catch (a) { return console.error("Error fetching company:", a), null } }, async updateCompany(e, o) { t(); try { let r = await fetch(`${process.env.BACKEND_URL}/api/adminportal/${e}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify(o) }); if (!r.ok) { let n = await r.json(); throw console.error("Error:", n), Error("Failed to update company") } let a = await r.json(); return a } catch (i) { throw console.error(i), i } }, async deleteCompanyWithDependencies(e) { let o = t(), n = o.token, a = process.env.BACKEND_URL, i = { "Content-Type": "application/json", Authorization: `Bearer ${n}` }; try { let s = await fetch(`${a}/api/companies/${e}/requests`, { method: "DELETE", headers: i }); if (!s.ok) throw Error("Failed to delete requests"); if (!(s = await fetch(`${a}/api/companies/${e}/bookings`, { method: "DELETE", headers: i })).ok) throw Error("Failed to delete bookings"); if (!(s = await fetch(`${a}/api/companies/${e}/services`, { method: "DELETE", headers: i })).ok) throw Error("Failed to delete services"); if (!(s = await fetch(`${a}/api/companies/${e}`, { method: "DELETE", headers: i })).ok) throw Error("Failed to delete company"); let l = sessionStorage.getItem("user_id"); if (!(s = await fetch(`${a}/api/users/${l}`, { method: "DELETE", headers: i })).ok) throw Error("Failed to delete user"); return r({ user: null }), !0 } catch (c) { return console.error("Error deleting company with dependencies:", c), !1 } }, async getCompanyPublic(e) { let o = t().token; try { let r = await fetch(`${process.env.BACKEND_URL}/api/company/${e}`, { headers: { "Content-Type": "application/json", Authorization: `Bearer ${o}` } }); if (!r.ok) throw Error("Failed to fetch company"); let n = await r.json(); return n } catch (a) { throw console.error("Error fetching company:", a), a } }, async getCompanyServicesPublic(e) { let o = t().token; try { let r = await fetch(`${process.env.BACKEND_URL}/api/services/company/${e}`, { headers: { "Content-Type": "application/json", Authorization: `Bearer ${o}` } }); if (!r.ok) throw Error("Failed to fetch services"); let n = await r.json(); return n } catch (a) { throw console.error("Error fetching services:", a), a } }, async updateService(e, t) { try { let o = await fetch(`${process.env.BACKEND_URL}/api/services/${e}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify(t) }); if (!o.ok) { let r = await o.json(); throw Error(r.message || "Failed to update service") } let n = await o.json(); return n } catch (a) { throw console.error("Fetch error:", a), a } }, async deleteService(e) { try { let t = await fetch(process.env.BACKEND_URL + `/api/services/${e}`, { method: "DELETE", headers: { "Content-Type": "application/json" } }); if (t.ok) { let o = await t.json(); return o } { let r = await t.json(); throw Error(r.error || "Failed to delete service") } } catch (n) { return console.error("There was an error deleting the service:", n), !1 } } } }); export default getState;